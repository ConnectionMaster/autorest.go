// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6302, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import Foundation

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ChatOperations contains the methods for the Chat group.
type ChatOperations interface {
	// AddThreadMembers - Adds thread members to a thread. If members already exist, no change occurs. 
	AddThreadMembers(ctx context.Context, threadId string, chatAddThreadMembersOptions *ChatAddThreadMembersOptions) (*http.Response, error)
	// CreateThread - Creates a chat thread. 
	CreateThread(ctx context.Context, chatCreateThreadOptions *ChatCreateThreadOptions) (*CreateThreadResponseResponse, error)
	// DeleteMessage - Deletes a message. 
	DeleteMessage(ctx context.Context, threadId string, messageId string, chatDeleteMessageOptions *ChatDeleteMessageOptions) (*http.Response, error)
	// DeleteThread - Deletes a thread. 
	DeleteThread(ctx context.Context, threadId string, chatDeleteThreadOptions *ChatDeleteThreadOptions) (*http.Response, error)
	// GetMessage - Gets a message by id. 
	GetMessage(ctx context.Context, threadId string, messageId string, chatGetMessageOptions *ChatGetMessageOptions) (*MessageResponse, error)
	// GetMessages - Gets a list of messages from a thread. 
	GetMessages(ctx context.Context, threadId string, chatGetMessagesOptions *ChatGetMessagesOptions) (*GetMessagesResponseResponse, error)
	// GetReadReceipts - Gets read receipts for a thread. 
	GetReadReceipts(ctx context.Context, threadId string, chatGetReadReceiptsOptions *ChatGetReadReceiptsOptions) (*ReadReceiptArrayResponse, error)
	// GetThread - Gets a chat thread. 
	GetThread(ctx context.Context, threadId string, chatGetThreadOptions *ChatGetThreadOptions) (*ThreadResponse, error)
	// GetThreadMembers - Gets the members of a thread. 
	GetThreadMembers(ctx context.Context, threadId string, chatGetThreadMembersOptions *ChatGetThreadMembersOptions) (*ThreadMemberArrayResponse, error)
	// GetThreads - Gets the list of chat threads of a user. 
	GetThreads(ctx context.Context, chatGetThreadsOptions *ChatGetThreadsOptions) (*GetThreadsResponseResponse, error)
	// NotifyUserTyping - Posts a typing event to a thread, on behalf of a user. 
	NotifyUserTyping(ctx context.Context, threadId string, chatNotifyUserTypingOptions *ChatNotifyUserTypingOptions) (*http.Response, error)
	// RemoveThreadMember - Remove a member from a thread. 
	RemoveThreadMember(ctx context.Context, threadId string, memberId string, chatRemoveThreadMemberOptions *ChatRemoveThreadMemberOptions) (*http.Response, error)
	// SendMessage - Sends a message to a thread. 
	SendMessage(ctx context.Context, threadId string, chatSendMessageOptions *ChatSendMessageOptions) (*CreateMessageResponseResponse, error)
	// SendReadReceipt - Posts a read receipt event to a thread, on behalf of a user. 
	SendReadReceipt(ctx context.Context, threadId string, chatSendReadReceiptOptions *ChatSendReadReceiptOptions) (*http.Response, error)
	// UpdateMessage - Updates a message. 
	UpdateMessage(ctx context.Context, threadId string, messageId string, chatUpdateMessageOptions *ChatUpdateMessageOptions) (*http.Response, error)
	// UpdateThread - Updates a thread's properties. 
	UpdateThread(ctx context.Context, threadId string, chatUpdateThreadOptions *ChatUpdateThreadOptions) (*http.Response, error)
}

// chatOperations implements the ChatOperations interface.
type chatOperations struct {
	*Client
}

// AddThreadMembers - Adds thread members to a thread. If members already exist, no change occurs. 
func (client *chatOperations) AddThreadMembers(ctx context.Context, threadId string, chatAddThreadMembersOptions *ChatAddThreadMembersOptions) (*http.Response, error) {
	req, err := client.addThreadMembersCreateRequest(threadId, chatAddThreadMembersOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.addThreadMembersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// addThreadMembersCreateRequest creates the AddThreadMembers request.
func (client *chatOperations) addThreadMembersCreateRequest(threadId string, chatAddThreadMembersOptions *ChatAddThreadMembersOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/members"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if chatAddThreadMembersOptions != nil && chatAddThreadMembersOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatAddThreadMembersOptions.Mscv)
	}
	if chatAddThreadMembersOptions != nil {
		return req, req.MarshalAsJSON(chatAddThreadMembersOptions.Body)
	}
	return req, nil
}

// addThreadMembersHandleResponse handles the AddThreadMembers response.
func (client *chatOperations) addThreadMembersHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.addThreadMembersHandleError(resp)
	}
	return resp.Response, nil
}

// addThreadMembersHandleError handles the AddThreadMembers error response.
func (client *chatOperations) addThreadMembersHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// CreateThread - Creates a chat thread. 
func (client *chatOperations) CreateThread(ctx context.Context, chatCreateThreadOptions *ChatCreateThreadOptions) (*CreateThreadResponseResponse, error) {
	req, err := client.createThreadCreateRequest(chatCreateThreadOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createThreadHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createThreadCreateRequest creates the CreateThread request.
func (client *chatOperations) createThreadCreateRequest(chatCreateThreadOptions *ChatCreateThreadOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if chatCreateThreadOptions != nil && chatCreateThreadOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatCreateThreadOptions.Mscv)
	}
	if chatCreateThreadOptions != nil {
		return req, req.MarshalAsJSON(chatCreateThreadOptions.Body)
	}
	return req, nil
}

// createThreadHandleResponse handles the CreateThread response.
func (client *chatOperations) createThreadHandleResponse(resp *azcore.Response) (*CreateThreadResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.createThreadHandleError(resp)
	}
	result := CreateThreadResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CreateThreadResponse)
}

// createThreadHandleError handles the CreateThread error response.
func (client *chatOperations) createThreadHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// DeleteMessage - Deletes a message. 
func (client *chatOperations) DeleteMessage(ctx context.Context, threadId string, messageId string, chatDeleteMessageOptions *ChatDeleteMessageOptions) (*http.Response, error) {
	req, err := client.deleteMessageCreateRequest(threadId, messageId, chatDeleteMessageOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteMessageHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteMessageCreateRequest creates the DeleteMessage request.
func (client *chatOperations) deleteMessageCreateRequest(threadId string, messageId string, chatDeleteMessageOptions *ChatDeleteMessageOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/messages/{messageId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	urlPath = strings.ReplaceAll(urlPath, "{messageId}", url.PathEscape(messageId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	if chatDeleteMessageOptions != nil && chatDeleteMessageOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatDeleteMessageOptions.Mscv)
	}
	return req, nil
}

// deleteMessageHandleResponse handles the DeleteMessage response.
func (client *chatOperations) deleteMessageHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.deleteMessageHandleError(resp)
	}
	return resp.Response, nil
}

// deleteMessageHandleError handles the DeleteMessage error response.
func (client *chatOperations) deleteMessageHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// DeleteThread - Deletes a thread. 
func (client *chatOperations) DeleteThread(ctx context.Context, threadId string, chatDeleteThreadOptions *ChatDeleteThreadOptions) (*http.Response, error) {
	req, err := client.deleteThreadCreateRequest(threadId, chatDeleteThreadOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteThreadHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteThreadCreateRequest creates the DeleteThread request.
func (client *chatOperations) deleteThreadCreateRequest(threadId string, chatDeleteThreadOptions *ChatDeleteThreadOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	if chatDeleteThreadOptions != nil && chatDeleteThreadOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatDeleteThreadOptions.Mscv)
	}
	return req, nil
}

// deleteThreadHandleResponse handles the DeleteThread response.
func (client *chatOperations) deleteThreadHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotFound) {
		return nil, client.deleteThreadHandleError(resp)
	}
	return resp.Response, nil
}

// deleteThreadHandleError handles the DeleteThread error response.
func (client *chatOperations) deleteThreadHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// GetMessage - Gets a message by id. 
func (client *chatOperations) GetMessage(ctx context.Context, threadId string, messageId string, chatGetMessageOptions *ChatGetMessageOptions) (*MessageResponse, error) {
	req, err := client.getMessageCreateRequest(threadId, messageId, chatGetMessageOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getMessageHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getMessageCreateRequest creates the GetMessage request.
func (client *chatOperations) getMessageCreateRequest(threadId string, messageId string, chatGetMessageOptions *ChatGetMessageOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/messages/{messageId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	urlPath = strings.ReplaceAll(urlPath, "{messageId}", url.PathEscape(messageId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if chatGetMessageOptions != nil && chatGetMessageOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatGetMessageOptions.Mscv)
	}
	return req, nil
}

// getMessageHandleResponse handles the GetMessage response.
func (client *chatOperations) getMessageHandleResponse(resp *azcore.Response) (*MessageResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getMessageHandleError(resp)
	}
	result := MessageResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Message)
}

// getMessageHandleError handles the GetMessage error response.
func (client *chatOperations) getMessageHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// GetMessages - Gets a list of messages from a thread. 
func (client *chatOperations) GetMessages(ctx context.Context, threadId string, chatGetMessagesOptions *ChatGetMessagesOptions) (*GetMessagesResponseResponse, error) {
	req, err := client.getMessagesCreateRequest(threadId, chatGetMessagesOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getMessagesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getMessagesCreateRequest creates the GetMessages request.
func (client *chatOperations) getMessagesCreateRequest(threadId string, chatGetMessagesOptions *ChatGetMessagesOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/messages"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if chatGetMessagesOptions != nil && chatGetMessagesOptions.PageSize != nil {
		query.Set("pageSize", strconv.FormatInt(int64(*chatGetMessagesOptions.PageSize), 10))
	}
	if chatGetMessagesOptions != nil && chatGetMessagesOptions.StartTime != nil {
		query.Set("startTime", strconv.FormatInt(*chatGetMessagesOptions.StartTime, 10))
	}
	if chatGetMessagesOptions != nil && chatGetMessagesOptions.SyncState != nil {
		query.Set("syncState", *chatGetMessagesOptions.SyncState)
	}
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if chatGetMessagesOptions != nil && chatGetMessagesOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatGetMessagesOptions.Mscv)
	}
	return req, nil
}

// getMessagesHandleResponse handles the GetMessages response.
func (client *chatOperations) getMessagesHandleResponse(resp *azcore.Response) (*GetMessagesResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getMessagesHandleError(resp)
	}
	result := GetMessagesResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.GetMessagesResponse)
}

// getMessagesHandleError handles the GetMessages error response.
func (client *chatOperations) getMessagesHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// GetReadReceipts - Gets read receipts for a thread. 
func (client *chatOperations) GetReadReceipts(ctx context.Context, threadId string, chatGetReadReceiptsOptions *ChatGetReadReceiptsOptions) (*ReadReceiptArrayResponse, error) {
	req, err := client.getReadReceiptsCreateRequest(threadId, chatGetReadReceiptsOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getReadReceiptsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getReadReceiptsCreateRequest creates the GetReadReceipts request.
func (client *chatOperations) getReadReceiptsCreateRequest(threadId string, chatGetReadReceiptsOptions *ChatGetReadReceiptsOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/readreceipts"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if chatGetReadReceiptsOptions != nil && chatGetReadReceiptsOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatGetReadReceiptsOptions.Mscv)
	}
	return req, nil
}

// getReadReceiptsHandleResponse handles the GetReadReceipts response.
func (client *chatOperations) getReadReceiptsHandleResponse(resp *azcore.Response) (*ReadReceiptArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getReadReceiptsHandleError(resp)
	}
	result := ReadReceiptArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ReadReceiptArray)
}

// getReadReceiptsHandleError handles the GetReadReceipts error response.
func (client *chatOperations) getReadReceiptsHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// GetThread - Gets a chat thread. 
func (client *chatOperations) GetThread(ctx context.Context, threadId string, chatGetThreadOptions *ChatGetThreadOptions) (*ThreadResponse, error) {
	req, err := client.getThreadCreateRequest(threadId, chatGetThreadOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getThreadHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getThreadCreateRequest creates the GetThread request.
func (client *chatOperations) getThreadCreateRequest(threadId string, chatGetThreadOptions *ChatGetThreadOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if chatGetThreadOptions != nil && chatGetThreadOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatGetThreadOptions.Mscv)
	}
	return req, nil
}

// getThreadHandleResponse handles the GetThread response.
func (client *chatOperations) getThreadHandleResponse(resp *azcore.Response) (*ThreadResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getThreadHandleError(resp)
	}
	result := ThreadResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Thread)
}

// getThreadHandleError handles the GetThread error response.
func (client *chatOperations) getThreadHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// GetThreadMembers - Gets the members of a thread. 
func (client *chatOperations) GetThreadMembers(ctx context.Context, threadId string, chatGetThreadMembersOptions *ChatGetThreadMembersOptions) (*ThreadMemberArrayResponse, error) {
	req, err := client.getThreadMembersCreateRequest(threadId, chatGetThreadMembersOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getThreadMembersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getThreadMembersCreateRequest creates the GetThreadMembers request.
func (client *chatOperations) getThreadMembersCreateRequest(threadId string, chatGetThreadMembersOptions *ChatGetThreadMembersOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/members"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if chatGetThreadMembersOptions != nil && chatGetThreadMembersOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatGetThreadMembersOptions.Mscv)
	}
	return req, nil
}

// getThreadMembersHandleResponse handles the GetThreadMembers response.
func (client *chatOperations) getThreadMembersHandleResponse(resp *azcore.Response) (*ThreadMemberArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getThreadMembersHandleError(resp)
	}
	result := ThreadMemberArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ThreadMemberArray)
}

// getThreadMembersHandleError handles the GetThreadMembers error response.
func (client *chatOperations) getThreadMembersHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// GetThreads - Gets the list of chat threads of a user. 
func (client *chatOperations) GetThreads(ctx context.Context, chatGetThreadsOptions *ChatGetThreadsOptions) (*GetThreadsResponseResponse, error) {
	req, err := client.getThreadsCreateRequest(chatGetThreadsOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getThreadsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getThreadsCreateRequest creates the GetThreads request.
func (client *chatOperations) getThreadsCreateRequest(chatGetThreadsOptions *ChatGetThreadsOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if chatGetThreadsOptions != nil && chatGetThreadsOptions.PageSize != nil {
		query.Set("pageSize", strconv.FormatInt(int64(*chatGetThreadsOptions.PageSize), 10))
	}
	if chatGetThreadsOptions != nil && chatGetThreadsOptions.StartTime != nil {
		query.Set("startTime", strconv.FormatInt(*chatGetThreadsOptions.StartTime, 10))
	}
	if chatGetThreadsOptions != nil && chatGetThreadsOptions.SyncState != nil {
		query.Set("syncState", *chatGetThreadsOptions.SyncState)
	}
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	if chatGetThreadsOptions != nil && chatGetThreadsOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatGetThreadsOptions.Mscv)
	}
	return req, nil
}

// getThreadsHandleResponse handles the GetThreads response.
func (client *chatOperations) getThreadsHandleResponse(resp *azcore.Response) (*GetThreadsResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getThreadsHandleError(resp)
	}
	result := GetThreadsResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.GetThreadsResponse)
}

// getThreadsHandleError handles the GetThreads error response.
func (client *chatOperations) getThreadsHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// NotifyUserTyping - Posts a typing event to a thread, on behalf of a user. 
func (client *chatOperations) NotifyUserTyping(ctx context.Context, threadId string, chatNotifyUserTypingOptions *ChatNotifyUserTypingOptions) (*http.Response, error) {
	req, err := client.notifyUserTypingCreateRequest(threadId, chatNotifyUserTypingOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.notifyUserTypingHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// notifyUserTypingCreateRequest creates the NotifyUserTyping request.
func (client *chatOperations) notifyUserTypingCreateRequest(threadId string, chatNotifyUserTypingOptions *ChatNotifyUserTypingOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/typing"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if chatNotifyUserTypingOptions != nil && chatNotifyUserTypingOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatNotifyUserTypingOptions.Mscv)
	}
	return req, nil
}

// notifyUserTypingHandleResponse handles the NotifyUserTyping response.
func (client *chatOperations) notifyUserTypingHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.notifyUserTypingHandleError(resp)
	}
	return resp.Response, nil
}

// notifyUserTypingHandleError handles the NotifyUserTyping error response.
func (client *chatOperations) notifyUserTypingHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// RemoveThreadMember - Remove a member from a thread. 
func (client *chatOperations) RemoveThreadMember(ctx context.Context, threadId string, memberId string, chatRemoveThreadMemberOptions *ChatRemoveThreadMemberOptions) (*http.Response, error) {
	req, err := client.removeThreadMemberCreateRequest(threadId, memberId, chatRemoveThreadMemberOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.removeThreadMemberHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// removeThreadMemberCreateRequest creates the RemoveThreadMember request.
func (client *chatOperations) removeThreadMemberCreateRequest(threadId string, memberId string, chatRemoveThreadMemberOptions *ChatRemoveThreadMemberOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/members/{memberId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	urlPath = strings.ReplaceAll(urlPath, "{memberId}", url.PathEscape(memberId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	if chatRemoveThreadMemberOptions != nil && chatRemoveThreadMemberOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatRemoveThreadMemberOptions.Mscv)
	}
	return req, nil
}

// removeThreadMemberHandleResponse handles the RemoveThreadMember response.
func (client *chatOperations) removeThreadMemberHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNotFound) {
		return nil, client.removeThreadMemberHandleError(resp)
	}
	return resp.Response, nil
}

// removeThreadMemberHandleError handles the RemoveThreadMember error response.
func (client *chatOperations) removeThreadMemberHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// SendMessage - Sends a message to a thread. 
func (client *chatOperations) SendMessage(ctx context.Context, threadId string, chatSendMessageOptions *ChatSendMessageOptions) (*CreateMessageResponseResponse, error) {
	req, err := client.sendMessageCreateRequest(threadId, chatSendMessageOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.sendMessageHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// sendMessageCreateRequest creates the SendMessage request.
func (client *chatOperations) sendMessageCreateRequest(threadId string, chatSendMessageOptions *ChatSendMessageOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/messages"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if chatSendMessageOptions != nil && chatSendMessageOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatSendMessageOptions.Mscv)
	}
	if chatSendMessageOptions != nil {
		return req, req.MarshalAsJSON(chatSendMessageOptions.Body)
	}
	return req, nil
}

// sendMessageHandleResponse handles the SendMessage response.
func (client *chatOperations) sendMessageHandleResponse(resp *azcore.Response) (*CreateMessageResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.sendMessageHandleError(resp)
	}
	result := CreateMessageResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CreateMessageResponse)
}

// sendMessageHandleError handles the SendMessage error response.
func (client *chatOperations) sendMessageHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// SendReadReceipt - Posts a read receipt event to a thread, on behalf of a user. 
func (client *chatOperations) SendReadReceipt(ctx context.Context, threadId string, chatSendReadReceiptOptions *ChatSendReadReceiptOptions) (*http.Response, error) {
	req, err := client.sendReadReceiptCreateRequest(threadId, chatSendReadReceiptOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.sendReadReceiptHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// sendReadReceiptCreateRequest creates the SendReadReceipt request.
func (client *chatOperations) sendReadReceiptCreateRequest(threadId string, chatSendReadReceiptOptions *ChatSendReadReceiptOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/readreceipts"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if chatSendReadReceiptOptions != nil && chatSendReadReceiptOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatSendReadReceiptOptions.Mscv)
	}
	if chatSendReadReceiptOptions != nil {
		return req, req.MarshalAsJSON(chatSendReadReceiptOptions.Body)
	}
	return req, nil
}

// sendReadReceiptHandleResponse handles the SendReadReceipt response.
func (client *chatOperations) sendReadReceiptHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusCreated) {
		return nil, client.sendReadReceiptHandleError(resp)
	}
	return resp.Response, nil
}

// sendReadReceiptHandleError handles the SendReadReceipt error response.
func (client *chatOperations) sendReadReceiptHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// UpdateMessage - Updates a message. 
func (client *chatOperations) UpdateMessage(ctx context.Context, threadId string, messageId string, chatUpdateMessageOptions *ChatUpdateMessageOptions) (*http.Response, error) {
	req, err := client.updateMessageCreateRequest(threadId, messageId, chatUpdateMessageOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateMessageHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateMessageCreateRequest creates the UpdateMessage request.
func (client *chatOperations) updateMessageCreateRequest(threadId string, messageId string, chatUpdateMessageOptions *ChatUpdateMessageOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}/messages/{messageId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	urlPath = strings.ReplaceAll(urlPath, "{messageId}", url.PathEscape(messageId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	if chatUpdateMessageOptions != nil && chatUpdateMessageOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatUpdateMessageOptions.Mscv)
	}
	if chatUpdateMessageOptions != nil {
		return req, req.MarshalAsJSON(chatUpdateMessageOptions.Body)
	}
	return req, nil
}

// updateMessageHandleResponse handles the UpdateMessage response.
func (client *chatOperations) updateMessageHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateMessageHandleError(resp)
	}
	return resp.Response, nil
}

// updateMessageHandleError handles the UpdateMessage error response.
func (client *chatOperations) updateMessageHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

// UpdateThread - Updates a thread's properties. 
func (client *chatOperations) UpdateThread(ctx context.Context, threadId string, chatUpdateThreadOptions *ChatUpdateThreadOptions) (*http.Response, error) {
	req, err := client.updateThreadCreateRequest(threadId, chatUpdateThreadOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateThreadHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateThreadCreateRequest creates the UpdateThread request.
func (client *chatOperations) updateThreadCreateRequest(threadId string, chatUpdateThreadOptions *ChatUpdateThreadOptions) (*azcore.Request, error) {
	urlPath := "/chat/threads/{threadId}"
	urlPath = strings.ReplaceAll(urlPath, "{threadId}", url.PathEscape(threadId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-07-20-preview1")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	if chatUpdateThreadOptions != nil && chatUpdateThreadOptions.Mscv != nil {
		req.Header.Set("MS-CV", *chatUpdateThreadOptions.Mscv)
	}
	if chatUpdateThreadOptions != nil {
		return req, req.MarshalAsJSON(chatUpdateThreadOptions.Body)
	}
	return req, nil
}

// updateThreadHandleResponse handles the UpdateThread response.
func (client *chatOperations) updateThreadHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateThreadHandleError(resp)
	}
	return resp.Response, nil
}

// updateThreadHandleError handles the UpdateThread error response.
func (client *chatOperations) updateThreadHandleError(resp *azcore.Response) error {
body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
    }
    if len(body) == 0 {
      return errors.New(resp.Status)
    }
    return errors.New(string(body))
    }

